#include<iostream>
#include<string>
#include<fstream>
using namespace std;
class student
{
	int rollnumber;
	string name;
	float cgpa;
public:
	student()
	{
		rollnumber = 0;
		cgpa = 0;
	}
	student(int x, string arr, float y)
	{
		rollnumber = x;
		name = arr;
		/*for (int i = 0; arr[i] != '\0'; i++)
		{
			name[i] = arr[i];
		}*/
		cgpa = y;
	}
	student(const student&obj)
	{
		rollnumber = obj.rollnumber;
		cgpa = obj.cgpa;
		name = obj.name;
	}
	bool  operator >(const student obj)
	{
		if (this->rollnumber > obj.rollnumber)
			return true;
		else
			return false;

	}
	bool  operator <(const student obj)
	{
		if (this->rollnumber < obj.rollnumber)
			return true;
		else
			return false;

	}
	bool  operator <(int key)
	{
		if (this->rollnumber < key)
			return true;
		else
			return false;

	}
	bool operator== (int key)const
	{
		if (this->rollnumber == key)
			return true;
		else
			return false;
	}

	friend ostream & operator << (ostream & out, const student & obj);

};
ostream & operator<<(ostream& out, const student&obj)
{
	out << "Name:" << obj.name << endl;
	out << "Roll Number:" << obj.rollnumber << endl;
	out << "CGPA:" << obj.cgpa << endl<<endl;

	return out;
}
template <class T>
struct node
{
	T data;
	int height;
	node<T> *left;
	node<T> *right;
	node()
	{
		height = 0;
		left = nullptr;
		right= nullptr;
	}
	node(T x)
	{
		data = x;
		left = nullptr;
		right = nullptr;
	}
};
template<class T>
class AVLTree
{
	node<T>* root;
public:
	AVLtree()
	{
		root = nullptr;
	}
	int height(node<T>*temp)
	{
		if (temp == nullptr)
			return 0;
		int left = height(temp->left);
		int right = height(temp->right);
		if (left > right)
			return left + 1;
		return right + 1;
	}
	int max(int a, int b)
	{
		if (a > b)
			return a;
		else
			return b;
	}
	node<T>* rotateRight(node<T>*root)
	{
		node<T>*temp = root->left;
		root->left = temp->right;
		temp->right = root;
		root->height = max(height(root->right), height(root->left)) + 1;
		temp->height = max(height(temp->right), height(temp->left)) + 1;
		return temp;
	}
	node<T>* rotateLeft(node<T>*root)
	{
		node<T>*temp = root->right;
		root->right = temp->left;
		temp->left = root;
		root->height = max(height(root->right), height(root->left)) + 1;
		temp->height = max(height(temp->right), height(temp->left)) + 1;
		return temp;

	}
	node<T>* insertion(node<T>*root, T item)
	{
		if (root == nullptr)
			return new node<T>(item);
		else if (item < root->data)
			root->left = insertion(root->left, item);
		else if(item > root->data)
			root->right = insertion(root->right, item);
		else
		   return root;
		int balance = height(root->left) - height(root->right);
		if (balance > 1)
		{
			if (height(root->left->left) >= height(root->left->right))
				return rotateRight(root);  //leftleft case
			else
			{
				root->left = rotateLeft(root->left);
				return rotateRight(root); // left right case
			}
		}
		if (balance < -1)
		{
			if (height(root->right->right) >= height(root->right->left))
				return rotateLeft(root);// right right case
			else
			{
				root->right = rotateRight(root->right);
				return rotateLeft(root);//right left cse
			}
		}
		root->height = max(height(root->left), height(root->right)) + 1;
		return root;
	}
	void insert(T item)
	{
		if (root == nullptr)
		{
			node<T>*temp = insertion(root, item);
			root = temp;
		}
		else {
			root = insertion(root, item);

		}

	}
	void printing(node<T>* temp)
	{

		if (temp != nullptr)
		{
			printing(temp->left);
			cout << temp->data << " ";
			printing(temp->right);
		}
		else
		{
			return;
		}
	}
	void inOrderprint()
	{
		node<T>*temp = root;
		printing(temp);

	}
	node<T>*searching(node<T>*temp,int key)
	{
		if (temp == nullptr)
		{
			return temp;
		}
		if (temp->data==key )
		{
			return temp;
		}

		if (temp->data<key)
			searching(temp->right, key);
		else
			searching(temp->left, key);


	}
	T search(int key)
	{
		node<T>*temp = root;
		 node<T>* aux = searching(temp, key);
		 return aux->data;
	}
	node<t>* deletekeyy(node<t>* temp, t key)
	{

		if (temp == nullptr)
		{
			cout << "\nelement not found" << endl;
		}
		else if (temp->data > key )
		{
			temp->lchild = deletekeyy(temp->lchild, key);

		}
		else if (temp->data < key)
		{
			temp->rchild = deletekeyy(temp->rchild, key);
		}
		else
		{
			if (temp->rchild != nullptr && temp->lchild != nullptr)
			{
				temp = min(temp->rchild);
				t a = temp->data;
				temp->rchild = deletekeyy(temp->rchild, a);
			}
			else
			{
				node<t>* t1;
				t1 = temp;
				if (temp->lchild == nullptr)
				{
					temp = temp->rchild;
					return temp;
				}
				else if (temp->rchild == nullptr)
				{
					temp = temp->lchild;
					return temp;
				}
			}
		}
		return temp;
	}
	node<t>* min(node<t>* temp)
	{
		if (temp != nullptr)
		{
			if (temp->lchild != nullptr)
				return min(temp->lchild);
			return temp;
		}
	}
	node<t>* balancing_after_deletion(node<t>* temp, t item)
	{
		temp->height = 1 + max(heightt(temp->lchild), heightt(temp->rchild));
		int balance = balancingfactor(temp);

		if (balance > 1 && item < temp->lchild->data)
			return right_rotate(temp);
		if (balance < -1 && item > temp->rchild->data)
			return left_rotate(temp);
		if (balance > 1 && item < temp->lchild->data)
		{
			temp->lchild = left_rotate(temp->lchild);
			return right_rotate(temp);
		}
		if (balance < -1 && item > temp->rchild->data)
		{
			temp->rchild = right_rotate(temp->rchild);
			return left_rotate(temp);
		}
		return temp;
	}
	node<t>* deletekey(t key)
	{
		node<t>* temp = root;
		deletekeyy(temp, key);
		return balancing_after_deletion(temp, key);	
	}
};

template<class t>
void populateStudentTree(string filename, AVLtree<t>&std)
{
	int total;
	int roll;
	//char arr[20];
	float gpa;
	string buffer;
	fstream fin(filename, ios::in);
	if (fin.is_open() == false) {
		cout << "Error! File not Opened" << endl;
	}
	else
	{
		while (fin.eof() == false)
		{
			fin >> total;
			for (int i = 0; i < total; i++)
			{
				fin >> roll;
				fin.ignore();
				getline(fin, buffer, ' ');
				fin >> gpa;
				student obj(roll, buffer, gpa);
				std.insert(obj);
			}
		}
		fin.close();
	}
}
int main()
{
	AVLTree<student> std;
	populateStudentTree<student>("students.txt", std);
	cout << "Print after file loading: " << endl;
		std.inOrderprint();
		char arr[10] = "MSK";
		float x = 3.53;
	student obj(41, arr, x);
	std.insert(obj);
	cout << "Print after new insert: " << endl;
		std.inOrderprint();
	cout << "Data of student, whose roll number is 254, is as follows: " << endl;
	cout << std.search(254);
	cout << "enter element to delete: ";
	cin >> x;
	student obj1(x);
	std.deletekey(obj1);
	cout << "Print after deletion: " << endl;
	std.inOrderprint();
	system("pause");
}
