#include<iostream> 
#include<list>
#include<fstream>
using namespace std; 


class Graph 
{ 
	int V;    // No. of vertices 

	list<int> *adj; 

	void DFSUtil(int v, bool visited[]); 
public: 
	Graph(int V);   // Constructor 

	void addEdge(int v, int w); 
	void DFS(int v); 



}; 

Graph::Graph(int V) 
{ 
	this->V = V; 
	adj = new list<int>[V]; 
} 

void Graph::addEdge(int v, int w) 
{ 
	adj[v].push_back(w); // Add w to vâ€™s list. 
} 

void Graph::DFSUtil(int v, bool visited[]) 
{ 
	visited[v] = true; 
	cout << v << " "; 

	// Recur for all the vertices adjacent 
	// to this vertex 
	list<int>::iterator i; 
	for (i = adj[v].begin(); i != adj[v].end(); ++i) 
		if (!visited[*i]) 
			DFSUtil(*i, visited); 
} 
void Graph::DFS(int v) 
{ 
	bool *visited = new bool[V]; 
	for (int i = 0; i < V; i++) 
		visited[i] = false; 
	DFSUtil(v, visited); 
} 

int main() 
{ 
	
	int noc;
	int nor;
	int nof;
	int x,y;
	cout << endl;

	fstream finn;
	finn.open("case1.txt");

	finn >> noc;
	finn>>nof;
	finn>>nor;
	cout<<"Total no of Cities "<<noc<<endl;
	Graph g(noc);
	cout<<"Total no of Roads. "<<nor<<endl;
	cout<<"Total no of Flights. "<<nof<<endl;
	finn.ignore();
	for(int i=0;i<nor;i++)
	{
		finn >> x;
		finn.ignore();
		finn>>y;
		g.addEdge(x, y); 
	}

	finn.close();
	int p;
	cout<<"Enter the No for which you want the Path"<<endl;
	cin>>p;
	g.DFS(p);
	

	system("pause");
	return 0; 
}
