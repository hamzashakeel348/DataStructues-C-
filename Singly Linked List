#include<iostream>
using namespace std;
template<class t>
class Node
{
public:
t data;
Node *next;
Node()
{
next=nullptr;
}
void setdata(t a)
{
data=a;
}
void setnext(Node<t> *a)
{
next=a;
}


};
template<class t>
class linkedlist
{
protected:
Node<t> *head;

public:

linkedlist()
{
head = nullptr;
}
void InsertAtStart(t const element)
{

if(head ==nullptr)
{
Node<t> *p=new Node<t>();
p->setdata(element);
p->setnext(nullptr);
head=p;
}
else
{
Node<t> *temp= new Node<t>();
temp->setdata(element);
temp->setnext(head);
head=temp;
}
}
void insertAtEnd(t const element)
{
Node<t> *temp=new Node<t>();
temp->setdata(element);
temp->setnext(nullptr);
Node<t> *p=head;
while(p->next!=nullptr)
{
p=p->next;
}
p->next=temp;
}
void print() const
{
Node<t> *p=head;

while(p!=nullptr)
{
cout<<p->data<<" ";
p=p->next;
}
}
bool search(t const& element) const
{
bool istrue=false;
Node<t> *a=head;
while(a!=nullptr)
{
if (a->data==element)
{
istrue=true;
cout<<endl;
cout<<"Found"<<endl;
return istrue;
}
a=a->next;
}
/*if(istrue)
{
cout<<"Found"<<endl;
}
else
{
cout<<"Not found"<<endl;
}*/
}
bool isEmpty() const
{
if(head==nullptr)
{
cout<<"List is empty"<<endl;
}
}
bool insertBefore(t const v1, t const v2) const
{
bool dec=false;
Node<t> *a=head;
Node<t>*temp;
if(a!=nullptr)
{
while(a->next!=nullptr && a->data!=v2)
{
temp=a;
a=a->next;
}
Node<t>* p1=new Node<t> ();
p1->data=v1;
temp->next=p1;
p1->next=a;
}
return dec;
}



void deleteAll(t value)
{
Node<t> *p=head;
Node<t> *q=new Node<t>();



while (p!=nullptr && p->data == value)
{
prev = current;
p = p->next;
head = p;
delete prev;
}



while (p)
{
if (p->data == value)
{
prev->next = p->next;
delete p;
p = prev->next;
}
prev = p;
p = p->next;
}



}
~linkedlist()
{
Node<t>*temp=head;
while(head!=nullptr)
{
temp=head->next;
delete head;
head=temp;
head=nullptr;
}
}
void DeleteAtStart()
{
Node<t>*q=new Node<t>();
q=head;
head=q->next;
q->next=nullptr;
}

void reverselist()
{

Node<t>*current=new Node<t>();
current= head;
Node<t> *prev = nullptr;
Node<t>*next = nullptr;

while (current != nullptr) {

next = current->next;
current->next = prev;
prev = current;
current = next;
}
head = prev;
}
};

