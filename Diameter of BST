#include<iostream>
#include<queue>
using namespace std;


struct TNode
{
	int key;
	int value;
	TNode *left,*right;
public:
	TNode(){}
	TNode(int a)
	{
		left=right=nullptr;
		value=a;
	}
};

class BST{
	TNode * root;
public:
	BST(){
		root=nullptr;
	}

	void preorder()
	{
		printPreorder(root);
	}

	void printPreorder(TNode* node) 
	{ 

		if (node == NULL) 
		{
			return; 
		}
		cout << node->value << " "; 
		printPreorder(node->left);  
		printPreorder(node->right); 

	}  
	bool insertIteratively(int d)
	{
		TNode* ptr = new TNode(d);
		TNode* temp = root;
		TNode* aux = nullptr;
		if (root != nullptr)
		{
			while (temp != nullptr)
			{
				aux = temp;
				if (d < temp->value)
					temp = temp->left;
				else if (d == temp->value)
				{
					cout << "Data is already existing" << endl;
					return false;
				}
				else
					temp = temp->right;
			}
			if (d < aux->value)
				aux->left = ptr;
			else
				aux->right = ptr;
			return true;
		}
		else
		{
			root = ptr;
			return true;

		}
	}
	int Hheight()
	{
		int x,y;
		x=height(root->right);
		y=height(root->left);
		return 1+x+y;

	}




	int height(TNode *root)
	{
		// empty tree has height 0
		if (root == nullptr)
			return 0;

		// create an empty queue and enqueue root node
		queue<TNode*> qu;
		qu.push(root);

		TNode* front = nullptr;
		int height = 0;
		while (!qu.empty())
		{
			int size = qu.size();
			while (size--)
			{
				front = qu.front();
				qu.pop();

				if (front->left)
					qu.push(front->left);

				if (front->right)
					qu.push(front->right);
			}

			height++;
		}

		return height;
	}

};
